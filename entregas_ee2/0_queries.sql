/* CHECKLIST

1. SELECT REF ✅
2. SELECT DEREF ✅
3. CONSULTA À VARRAY✅
4. CONSULTA À NESTED TABLE ✅

*/

----- CONSULTA PRIMÁRIA CLIENTE PF ----- 
SELECT 	
	CPF,
    NOME, 
	DATA_NASCIMENTO,
	SEXO, 
    DEREF(C.endereco).CEP 			AS CEP, 
    DEREF(C.endereco).numero 		AS NUMERO, 
    DEREF(C.endereco).LOGRADOURO 	AS LOGRADOURO, 
    DEREF(C.endereco).bairro 		AS BAIRRO,
    DEREF(C.endereco).cidade 		AS CIDADE, 
    DEREF(C.endereco).estado 		AS ESTADO,
    CONCAT(t.ddd, t.numero) 		AS NUMERO_TELEFONE
FROM tb_cliente_pf C, TABLE(C.telefone) t;


----- CONSULTA PRIMÁRIA CLIENTE PJ ----- 
SELECT 	
    CNPJ,
	RAZAO_SOCIAL,
	NOME_FANTASIA,
	STATUS_CNPJ,
	CAPITAL_SOCIAL,
	PORTE,
    DEREF(C.endereco).CEP 			AS CEP, 
    DEREF(C.endereco).numero 		AS NUMERO, 
    DEREF(C.endereco).LOGRADOURO 	AS LOGRADOURO, 
    DEREF(C.endereco).bairro 		AS BAIRRO,
    DEREF(C.endereco).cidade 		AS CIDADE, 
    DEREF(C.endereco).estado 		AS ESTADO,
    CONCAT(t.ddd, t.numero) 		AS NUMERO_TELEFONE
FROM tb_cliente_pj C, TABLE(C.telefone) t;


----- CONSULTA PRIMÁRIA PRODUTO  ----- 
SELECT 	
	SKU, NOME, DESCRICAO, PRECO
FROM TB_PRODUTO;


----- CONSULTA PRIMÁRIA ENTREGA  ----- 
SELECT 	
	ID_ENTREGA,
	STATUS_ENTREGA,
	DATA_POSTAGEM,
	DATA_ENTREGA,
	DEREF(endereco).CEP 			AS CEP, 
    DEREF(endereco).numero 		AS NUMERO, 
    DEREF(endereco).LOGRADOURO 	AS LOGRADOURO, 
    DEREF(endereco).bairro 		AS BAIRRO,
    DEREF(endereco).cidade 		AS CIDADE, 
    DEREF(endereco).estado 		AS ESTADO
FROM TB_ENTREGA;

----- QUANTIDADE DE CLIENTES COM CASA E NÃO APARTAMENTOS POR ESTADO  ----- 
SELECT 	
	ESTADO, SUM(CASE WHEN APARTAMENTO = -1 THEN 1 ELSE 0 END) QTD_CASA
FROM TB_ENDERECO
GROUP BY CIDADE, ESTADO;

-- CONSULTA PRIMARIA COMPRA (OVERVIEW GERAL DOS ITENS TRANSACIONADOS E AS INFORMACOES RELATIVAS A ELES)
SELECT 
COALESCE(
	DEREF(C.CLIENTE_PF).cpf, 
	DEREF(C.CLIENTE_PJ).cnpj
	)	AS DOCUMENTO,
T.SKU AS SKU, T.QUANTIDADE AS QUANTIDADE,
DEREF(C.PAGAMENTO).ID_PAGAMENTO AS ID_PAGAMENTO, 
DEREF(C.PAGAMENTO).STATUS_PAGAMENTO AS STATUS_PAGAMENTO,
DEREF(C.PAGAMENTO).DATA_PAGAMENTO AS DATA_PAGAMENTO,
DATA_COMPRA,
VALOR_COMPRA
FROM tb_compra C, TABLE(DEREF(C.PEDIDO).DETALHE_PEDIDO) T

-- VALOR MÉDIO DOS SKUS POR CLIENTE
SELECT 
DOCUMENTO, AVG(TP.PRECO) AS VALOR_TOTAL FROM (
SELECT 
COALESCE(
	DEREF(C.CLIENTE_PF).cpf, 
	DEREF(C.CLIENTE_PJ).cnpj
	)	AS DOCUMENTO,
T.SKU AS SKU
FROM tb_compra C, TABLE(DEREF(C.PEDIDO).DETALHE_PEDIDO) T
) A
LEFT JOIN TB_PRODUTO TP
ON TP.SKU = A.SKU
GROUP BY A.DOCUMENTO;


-- DOCUMENTO (CPF OU CNPJ) E O STATUS DE CADA PEDIDO ASSOCIADO A ELE 
SELECT 
COALESCE(
	DEREF(C.CLIENTE_PF).cpf, 
	DEREF(C.CLIENTE_PJ).cnpj
	)	AS DOCUMENTO,
DEREF(C.PEDIDO).ID_PEDIDO AS ID_PEDIDO,
DEREF(C.PEDIDO).STATUS AS STATUS_PEDIDO
FROM tb_compra C;

-- DOCUMENTO, ID E STATUS DOS PEDIDOS COM PAGAMENTO REALIZADO ANTES DO MES DE ABRIL DE 2022
SELECT 
COALESCE(
	DEREF(C.CLIENTE_PF).cpf, 
	DEREF(C.CLIENTE_PJ).cnpj
	)	AS DOCUMENTO,
DEREF(C.PEDIDO).ID_PEDIDO AS ID_PEDIDO,
DEREF(C.PEDIDO).STATUS AS STATUS_PEDIDO
FROM tb_compra C
WHERE DEREF(C.PAGAMENTO).DATA_PAGAMENTO < DATE '2022-04-01';


-- TELEFONE DO CLIENTE, INFORMAÇÕES DOS PEDIDOS E VALOR DA COMPRA DE COMPRAS
-- A PARTIR DE ABRIL DE 2022, ORDENADO DE MAIOR PRA MENOR
SELECT 
COALESCE(
	DEREF(C.CLIENTE_PF).telefone, 
	DEREF(C.CLIENTE_PJ).telefone
	)	AS telefone,
DEREF(C.PEDIDO).ID_PEDIDO AS ID_PEDIDO,
DEREF(C.PEDIDO).STATUS AS STATUS_PEDIDO,
DEREF(C.PEDIDO).DETALHE_PEDIDO AS DETALHE_PEDIDO,
C.VALOR_COMPRA
FROM tb_compra C
WHERE DEREF(C.PAGAMENTO).DATA_PAGAMENTO >= DATE '2022-04-01'
ORDER BY VALOR_COMPRA DESC;


-- QUANTIDADE DE SKUS E VALOR TOTAL PARA CADA PEDIDO
SELECT 
A.ID_PEDIDO, COUNT(A.SKU) AS SKU_DISTINTOS, SUM(TP.PRECO) AS VALOR_TOTAL FROM (
SELECT 
COALESCE(
	DEREF(C.CLIENTE_PF).cpf, 
	DEREF(C.CLIENTE_PJ).cnpj
	)	AS DOCUMENTO,
DEREF(C.PEDIDO).ID_PEDIDO AS ID_PEDIDO,
T.SKU AS SKU
FROM tb_compra C, TABLE(DEREF(C.PEDIDO).DETALHE_PEDIDO) T
) A
LEFT JOIN TB_PRODUTO TP
ON TP.SKU = A.SKU
GROUP BY A.ID_PEDIDO;


-- PRODUTOS QUE NÃO ESTÃO EM NENHUM PEDIDO
SELECT TP.* FROM
(SELECT
T.SKU AS SKU
FROM tb_compra C, TABLE(DEREF(C.PEDIDO).DETALHE_PEDIDO) T
) A
FULL OUTER JOIN TB_PRODUTO TP
ON TP.SKU = A.SKU
WHERE A.SKU IS NULL OR TP.SKU IS NULL;


-- ENDEREÇOS NA BASE SEM NENHUMA ENTREGA ASSOCIADA
SELECT TP.* FROM
(SELECT
T.SKU AS SKU
FROM tb_compra C, TABLE(DEREF(C.PEDIDO).DETALHE_PEDIDO) T
) A
FULL OUTER JOIN TB_PRODUTO TP
ON TP.SKU = A.SKU
WHERE A.SKU IS NULL OR TP.SKU IS NULL;


-- ENDERECO COM ENTREGAS PENDENTES 
SELECT 	
    DEREF(E.endereco).CEP 			AS CEP, 
    DEREF(E.endereco).numero 		AS NUMERO, 
    DEREF(E.endereco).LOGRADOURO 	AS LOGRADOURO, 
    DEREF(E.endereco).bairro 		AS BAIRRO,
    DEREF(E.endereco).cidade 		AS CIDADE, 
    DEREF(E.endereco).estado 		AS ESTADO
FROM TB_ENTREGA E
WHERE E.STATUS_ENTREGA != 'ENTREGUE';


-- QUANTIDADE MÉDIA DE SKUS POR  STATUS DO PEDIDO
SELECT A.STATUS, AVG(P.QUANTIDADE)
FROM TB_PEDIDO A, TABLE(A.DETALHE_PEDIDO) P
GROUP BY A.STATUS;


-- VALOR MÉDIO POR TIPO DE CLIENTE
SELECT 
CASE WHEN LEN_DOC = 11 THEN 'PF' ELSE 'PJ' END AS CATEGORIA_CLIENTE, 
AVG(TP.PRECO) AS VALOR_TOTAL FROM (
SELECT 
COALESCE(
	LENGTH(DEREF(C.CLIENTE_PF).cpf), 
	14
	)	AS LEN_DOC,
T.SKU AS SKU
FROM tb_compra C, TABLE(DEREF(C.PEDIDO).DETALHE_PEDIDO) T
) A
LEFT JOIN TB_PRODUTO TP
ON TP.SKU = A.SKU
GROUP BY CASE WHEN A.LEN_DOC = 11 THEN 'PF' ELSE 'PJ' END;


-- PRINTAR NOME E PREÇO DOS PRODUTO NAO COMPRADOS APLICANDO DESCONTO DE 20% 
-- (QUEIMA DE ESTOQUE)
DECLARE
	produto_nome TB_PRODUTO.nome%TYPE;
    produto_preco TB_PRODUTO.preco%TYPE;
BEGIN
  FOR sku_id IN 1..15
  LOOP
  	DECLARE
	produto_nome TB_PRODUTO.nome%TYPE;
    produto_preco TB_PRODUTO.preco%TYPE;
BEGIN
  	SELECT nome, preco * 0.8 INTO produto_nome, produto_preco 
    FROM (SELECT DISTINCT sku, nome, preco FROM TB_PRODUTO) WHERE sku = LPAD(to_char(sku_id), 10, '0');
  	dbms_output.put_line(produto_nome || ' esta em promocao por ' || produto_preco);
END;
  END LOOP;
END;


-- -- 